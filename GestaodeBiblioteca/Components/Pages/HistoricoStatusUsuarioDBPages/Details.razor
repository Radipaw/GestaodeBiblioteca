@page "/historico/details"
@using Microsoft.EntityFrameworkCore
@using GestaodeBiblioteca.Models.Entities
@inject IDbContextFactory<GestaodeBiblioteca.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>HistoricoStatusUsuarioDB</h2>
    <hr />
    @if (historicostatususuariodb is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Usuario</dt>
            <dd class="col-sm-10">@historicostatususuariodb.Usuario.NomeCompleto</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@historicostatususuariodb.Status</dd>
            <dt class="col-sm-2">DataAlteracao</dt>
            <dd class="col-sm-10">@historicostatususuariodb.DataAlteracao</dd>
            <dt class="col-sm-2">Motivo</dt>
            <dd class="col-sm-10">@historicostatususuariodb.Motivo</dd>
            <dt class="col-sm-2">Observacoes</dt>
            <dd class="col-sm-10">@historicostatususuariodb.Observacoes</dd>
        </dl>
        <div>
            <a href="@($"/historico")">Back to List</a>
        </div>
    }
</div>

@code {
    private HistoricoStatusUsuarioDB? historicostatususuariodb;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        historicostatususuariodb = await context.HistoricoStatusUsuarioDB.FirstOrDefaultAsync(m => m.Id == Id);

        if (historicostatususuariodb is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
